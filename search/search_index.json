{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Site Documentation \u00b6 Welcome, browse sections at the top of the site.","title":"Site Documentation"},{"location":"#site-documentation","text":"Welcome, browse sections at the top of the site.","title":"Site Documentation"},{"location":"development/clone-from-git/","text":"Clone Laddr from git \u00b6 This guide is for developers who want to work on Laddr\u2019s core code. It will walk you through setting up a fresh site instance and cloning a version of Laddr into it from a remote git repository. Step 1: Obtain an emergence host \u00b6 You will need a host server dedicated to running emergence. If you don\u2019t have access to one already, the easiest way to get started is to spin up a small Ubuntu 16.04 LTS virtual machine with a cloud provider like Digital Ocean, Google Cloud Compute, AWS, or countless others. Once you are logged in to your fresh Ubuntu 16.04 machine, follow emergence\u2019s installation guide to prepare it for hosting emergence-powered sites like Laddr. Alternatively, if you\u2019re familiar with Docker, you can spin up an emergence container: docker run -d \\ -it \\ --name emergence \\ -v /emergence:/emergence \\ -p 127 .0.0.10:80:80 \\ -p 127 .0.0.10:3306:3306 \\ -p 127 .0.0.10:9083:9083 \\ jarvus/emergence \\ tmux new -s emergence emergence-kernel Step 2: Create a site for your laddr development instance \u00b6 Laddr is based on emergence\u2019s skeleton-v2 site template. Unlike when provising a deployment instance of Laddr, for development you want to create a site extending Laddr\u2019s parent site like Laddr does rather than Laddr itself. Laddr\u2019s code will be cloned from git and applied on top of the parent site. Use emergence\u2019s host control panel to create a new site with your desired hostname and initial user, just be sure to select skeleton-v2.emr.ge as the parent hostname. After the site is created login to /develop with your initial user developer account. Step 3: Configure mapping to the laddr git repository \u00b6 To configure a link between your emergence instance and a git repository, create a new file at php-config/Git.config.d/laddr.php and copy its initial contents from the the file at the same path in Laddr\u2019s develop branch on Github. Optionally, edit the remote option to point at your own fork, and switch it to the SSH protocol if you\u2019d like to be able to push changes from the web UI. Step 4: Initialize git repository \u00b6 Visit /site-admin/sources to initialize the configured git repository. If you switch the remote to an SSH git URL before initializing, a deploy key will be generated for you that you can install on GitHub before continueing to enable web-based read/write access. Otherwise, if you are cloning via HTTPS, you will need to SSH into the server and use the git CLI to push changes after initializing the repository. Step 5: Pull code from git \u00b6 Visit /site-admin/sources/laddr and click Pull if needed to pull the latest commits from github into your git working copy. Then click the Sync -> Update emergence VFS button to import the git working tree copy into your emergence instance. Next steps \u00b6 If you run into any trouble, need to reconfigure the repository, or execute any advanced maneuvers, use emergence-git-shell my-instance-name laddr on your host machine to drop into a properly-configured git shell where you can make full use of the git CLI client without any permissions issues.","title":"Clone Laddr from git"},{"location":"development/clone-from-git/#clone-laddr-from-git","text":"This guide is for developers who want to work on Laddr\u2019s core code. It will walk you through setting up a fresh site instance and cloning a version of Laddr into it from a remote git repository.","title":"Clone Laddr from git"},{"location":"development/clone-from-git/#step-1-obtain-an-emergence-host","text":"You will need a host server dedicated to running emergence. If you don\u2019t have access to one already, the easiest way to get started is to spin up a small Ubuntu 16.04 LTS virtual machine with a cloud provider like Digital Ocean, Google Cloud Compute, AWS, or countless others. Once you are logged in to your fresh Ubuntu 16.04 machine, follow emergence\u2019s installation guide to prepare it for hosting emergence-powered sites like Laddr. Alternatively, if you\u2019re familiar with Docker, you can spin up an emergence container: docker run -d \\ -it \\ --name emergence \\ -v /emergence:/emergence \\ -p 127 .0.0.10:80:80 \\ -p 127 .0.0.10:3306:3306 \\ -p 127 .0.0.10:9083:9083 \\ jarvus/emergence \\ tmux new -s emergence emergence-kernel","title":"Step 1: Obtain an emergence host"},{"location":"development/clone-from-git/#step-2-create-a-site-for-your-laddr-development-instance","text":"Laddr is based on emergence\u2019s skeleton-v2 site template. Unlike when provising a deployment instance of Laddr, for development you want to create a site extending Laddr\u2019s parent site like Laddr does rather than Laddr itself. Laddr\u2019s code will be cloned from git and applied on top of the parent site. Use emergence\u2019s host control panel to create a new site with your desired hostname and initial user, just be sure to select skeleton-v2.emr.ge as the parent hostname. After the site is created login to /develop with your initial user developer account.","title":"Step 2: Create a site for your laddr development instance"},{"location":"development/clone-from-git/#step-3-configure-mapping-to-the-laddr-git-repository","text":"To configure a link between your emergence instance and a git repository, create a new file at php-config/Git.config.d/laddr.php and copy its initial contents from the the file at the same path in Laddr\u2019s develop branch on Github. Optionally, edit the remote option to point at your own fork, and switch it to the SSH protocol if you\u2019d like to be able to push changes from the web UI.","title":"Step 3: Configure mapping to the laddr git repository"},{"location":"development/clone-from-git/#step-4-initialize-git-repository","text":"Visit /site-admin/sources to initialize the configured git repository. If you switch the remote to an SSH git URL before initializing, a deploy key will be generated for you that you can install on GitHub before continueing to enable web-based read/write access. Otherwise, if you are cloning via HTTPS, you will need to SSH into the server and use the git CLI to push changes after initializing the repository.","title":"Step 4: Initialize git repository"},{"location":"development/clone-from-git/#step-5-pull-code-from-git","text":"Visit /site-admin/sources/laddr and click Pull if needed to pull the latest commits from github into your git working copy. Then click the Sync -> Update emergence VFS button to import the git working tree copy into your emergence instance.","title":"Step 5: Pull code from git"},{"location":"development/clone-from-git/#next-steps","text":"If you run into any trouble, need to reconfigure the repository, or execute any advanced maneuvers, use emergence-git-shell my-instance-name laddr on your host machine to drop into a properly-configured git shell where you can make full use of the git CLI client without any permissions issues.","title":"Next steps"},{"location":"development/email/","text":"Working with Email \u00b6 Catching emails in development \u00b6 In the studio, you can enable relaying email to a specified SMTP endpoint. HELO and mailtrap are easy SMTP endpoints to set up for development that provide UIs for reviewing emails sent to all recipients. When emails are configured to be relayed to these services, they will be trapped for review and never actually delivered to anyone externally, no matter what recipients you use. As opposed to overriding recipient emails to test email features, this approach enables you to verify that personalized bulk emails send the right content to the right recipients. Using HELO \u00b6 Download and open the HELO app Launch studio, run start-all Install and activate postfix email backend: enable-email Configure postfix email backend to relay to EHLO app on Docker host machine: enable-email-relay host.docker.internal 2525 studio Or, using mailtrap: enable-email-relay smtp.mailtrap.io 2525 mailtrapusername mailtrappassword Sending a test email \u00b6 From the studio: Install netcat: hab pkg install --binlink core/netcat Open SMTP connection: nc localhost 25 Start SMTP session: EHLO localhost.localdomain Set sender: MAIL FROM: <sender@example.com> Set recipient: RCPT TO: <recipient@example.com> Set message: DATA Subject: Hello world! This is the body of my email. Have a good day. . Close SMTP session: QUIT Review postfix backend log: less -S /hab/cache/sys.log","title":"Working with Email"},{"location":"development/email/#working-with-email","text":"","title":"Working with Email"},{"location":"development/email/#catching-emails-in-development","text":"In the studio, you can enable relaying email to a specified SMTP endpoint. HELO and mailtrap are easy SMTP endpoints to set up for development that provide UIs for reviewing emails sent to all recipients. When emails are configured to be relayed to these services, they will be trapped for review and never actually delivered to anyone externally, no matter what recipients you use. As opposed to overriding recipient emails to test email features, this approach enables you to verify that personalized bulk emails send the right content to the right recipients.","title":"Catching emails in development"},{"location":"development/email/#using-helo","text":"Download and open the HELO app Launch studio, run start-all Install and activate postfix email backend: enable-email Configure postfix email backend to relay to EHLO app on Docker host machine: enable-email-relay host.docker.internal 2525 studio Or, using mailtrap: enable-email-relay smtp.mailtrap.io 2525 mailtrapusername mailtrappassword","title":"Using HELO"},{"location":"development/email/#sending-a-test-email","text":"From the studio: Install netcat: hab pkg install --binlink core/netcat Open SMTP connection: nc localhost 25 Start SMTP session: EHLO localhost.localdomain Set sender: MAIL FROM: <sender@example.com> Set recipient: RCPT TO: <recipient@example.com> Set message: DATA Subject: Hello world! This is the body of my email. Have a good day. . Close SMTP session: QUIT Review postfix backend log: less -S /hab/cache/sys.log","title":"Sending a test email"},{"location":"development/migrations/","text":"Developing Migrations \u00b6 Within the development studio: Create a new file under php-migrations/ Load modified working tree into runtime: update-site Execute all migrations: console-run migrations:execute --all (Re)Execute a specific migration: console-run migrations:execute --force \"Emergence/People/20191209_system-user\"","title":"Developing Migrations"},{"location":"development/migrations/#developing-migrations","text":"Within the development studio: Create a new file under php-migrations/ Load modified working tree into runtime: update-site Execute all migrations: console-run migrations:execute --all (Re)Execute a specific migration: console-run migrations:execute --force \"Emergence/People/20191209_system-user\"","title":"Developing Migrations"}]}